---
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys single EC2 and VPC whatever
Parameters:

  # Ownership

  EnvironmentName:
    Description: Name of the project in what EnvironmentName
    Type: String
    Default: <Projectname>Dev
  Owner:
    Description: Name for contact purpose
    Type: String
    Default: Name or TeamName
  Project:
    Description: Name of the project
    Type: String
    Default: eg. Project Blah Blah

  # Subnets

  IPv4CidrBlock:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  AvailabilityZone1:
    Type: String
    Default: a
    AllowedValues:
    - a
    - b
    - c
    - d
    - e
    - f
  AvailabilityZone2:
    Type: String
    Default: b
    AllowedValues:
    - a
    - b
    - c
    - d
    - e
    - f
  PublicSubnetCidrBlock1:
    Description: IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCidrBlock2:
    Description: IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.0.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock1:
    Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock2:
    Description: IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  # Instance

  KeyName:
    Description: EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 112.199.104.126/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  # Database

  DbInstanceTypeParameter:
    Type: String
    Default: db.t2.micro
    Description: The database instance type
    AllowedValues:
    - db.t2.micro
    - db.t2.large
    - db.m1.small
    - db.m1.large
    - db.m1.xlarge
    - db.m2.xlarge
    - db.m2.2xlarge
    - db.m2.4xlarge
    ConstraintDescription: must select a valid database instance type.
  DbIdentifier:
    Description: DB instance identifier
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.       
  DbUsername:
    Description: User name for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.    
  DbPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  DbAllocatedStorage:
    Default: '5'
    Description: The size of the database (GB)
    Type: String
    ConstraintDescription: must be between 5 and 1024Gb.

  # Setting up resources

Resources:

  # VPC, subnets, routes, IGW

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref IPv4CidrBlock
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone1 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock1
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-public-az1" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone2 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock2
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-public-az2" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-public" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - PublicRouteTable
    - InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - PublicRouteTable
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - PublicRouteTable
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone1 ] ]
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-private-az1" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone2 ] ]
      CidrBlock: !Ref PrivateSubnetCidrBlock2
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-private-az2" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-private" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # EC2 and Security Groups

  EC2Instance:  
    Type: AWS::EC2::Instance
    DependsOn: VPC
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1  
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName
      - Key: Project
        Value: !Ref Project
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-remote-to-instance" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation

  # Database instance   

  DataBaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable to access via port 3306
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-remote-to-db" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp:
          Ref: SSHLocation
  DbInstance2:
    Type: AWS::RDS::DBInstance
    DependsOn: VPC
    Properties:
      DBInstanceIdentifier:
        Ref: DbIdentifier
      VPCSecurityGroups:
      - Ref: DataBaseSecurityGroup
      DBSubnetGroupName:
        Ref: DbSubnetGroup
      AllocatedStorage:
        Ref: DbAllocatedStorage
      DBInstanceClass:
        Ref: DbInstanceTypeParameter
      Engine: MySQL
      EngineVersion: 5.7.22
      MultiAZ: 'false'
      MasterUsername:
        Ref: DbUsername
      MasterUserPassword:
        Ref: DbPassword
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - " "
          - - Ref: AWS::StackName
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2  
         
  # Instance mappings                  

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t3.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-southeast-1:
      HVM64: ami-0c5199d385b432989
Outputs:
  EnvironmentName:
    Description: Project name plus environment name
    Value: !Ref EnvironmentName
  Owner:
    Description: Team or Individual that Owns this Formation.
    Value: !Ref Owner
  Project:
    Description: The project name
    Value: !Ref Project
  VPC:
    Description: Created VPC
    Value: !Ref VPC
  VPCCIDR:
    Description: IPv4 CIDR Block
    Value: !Ref IPv4CidrBlock
  PublicRouteTable:
    Description: Public Route Table Created for VPC
    Value: !Ref PublicRouteTable
  PrivateRouteTable:
    Description: Private Route Table Created for VPC
    Value: !Ref PrivateRouteTable
  PublicSubnet1:
    Description: Public Subnet 1 Created for VPC
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet 2 Created for VPC
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet 2 Created for VPC
    Value: !Ref PrivateSubnet2
  AvailabilityZone1:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PublicSubnet1.AvailabilityZone
  AvailabilityZone2:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PublicSubnet2.AvailabilityZone
  PublicSubnetCidr1:
    Description: Public Subnet IDs Created for VPC
    Value: !Ref PublicSubnetCidrBlock1
  PublicSubnetCidr2:
    Description: Public Subnet IDs Created for VPC
    Value: !Ref PublicSubnetCidrBlock2
  PrivateSubnetCidr1:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock1
  PrivateSubnetCidr2:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock2
  InternetGateway:
    Description: Internet Gateway Created for VPC
    Value: !Ref InternetGateway
  InstanceSecurityGroup:
    Description: Instance to Instance Access within VPC
    Value: !Ref InstanceSecurityGroup
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Ownership
      Parameters:
      - EnvironmentName
      - Owner
      - Project
    - Label:
        default: Subnets
      Parameters:
      - IPv4CidrBlock
      - PublicSubnetCidrBlock1
      - PublicSubnetCidrBlock2
      - PrivateSubnetCidrBlock1
      - PrivateSubnetCidrBlock2
      - AvailabilityZone1
      - AvailabilityZone2
    - Label:
        default: Instance
      Parameters:
      - InstanceType
      - KeyName
      - SSHLocation
    - Label:
        default: RDS
      Parameters:
      - DbInstanceTypeParameter
      - DbIdentifier
      - DbUsername
      - DbPassword      
      - DbAllocatedStorage

  # Labeling UI

    ParameterLabels:
      EnvironmentName:
        default: Environment Name
      Owner:
        default: Team or Individual Owner
      IPv4CidrBlock:
        default: IPv4 CIDR Block
      PublicSubnetCidrBlock1:
        default: Public Subnet 1
      PublicSubnetCidrBlock2:
        default: Public Subnet 2
      PrivateSubnetCidrBlock1:
        default: Private Subnet 1
      PrivateSubnetCidrBlock2:
        default: Private Subnet 2
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      AllowRemoteNetworkPublicRuleNumber:
        default: Allow Remote Network
      DbInstanceTypeParameter:
        default: RDS Instance Type
      DbIdentifier:
        default: DB instance identifier
      DbPassword:
        default: DB Password
      DbUsername:
        default: DB Username
      DbAllocatedStorage:
        default: DB Storage 
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicIp
  DbInstanceId:
    Value:
      Ref: DbInstance2
    Description: RDS Instance Id newly created      