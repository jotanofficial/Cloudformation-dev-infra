Description: >
    This Creates a Container Service and Attaches it to a Pipeline, CodeBuild, ALB, Repo.
    Then Declares a task Definition.
Parameters:
    MinCapacity:
        Type: Number
    MaxCapacity:
        Type: Number
    Memory: 
        Type: Number
    Cpu:
        Type: Number
    ApprovalARN:
        Type: String
        Default: arn:aws:sns:ap-southeast-1:995765714352:CICD-Lambda-MA
    DeployToDevMsg:
        Type: String
    DeployToCanaryMsg:
        Type: String
    DeployToStagingMsg:
        Type: String
    DeployToProdMsg:
        Type: String
    DesiredCount:
        Type: Number
    FamilyDevelopment:
        Type: String
    FamilyCanary:
        Type: String
    FamilyStaging:
        Type: String
    FamilyProduction:
        Type: String
    ContainerName:
        Type: String
    DNSName:
        Type: String
    CertificateArn:
        Type: String
    VpcId:
        Type: String
    LoadBalancerListenerHTTP: 
        Type: String
    LoadBalancerListenerHTTPS: 
        Type: String
    DevLoadBalancerListenerHTTP: 
        Type: String
    DevLoadBalancerListenerHTTPS: 
        Type: String
    CanaryLoadBalancerListenerHTTP: 
        Type: String
    CanaryLoadBalancerListenerHTTPS: 
        Type: String
    StagingLoadBalancerListenerHTTP: 
        Type: String
    StagingLoadBalancerListenerHTTPS: 
        Type: String
    Cluster: 
        Type: String
    LogGroup: 
        Type: String
    ArtifactBucketName: 
        Type: String
    SecurityGroup:
        Type: String
    PublicSubnet1:
        Type: String
    PublicSubnet2:
        Type: String
    TaskExecutionRole:
        Type: String
    PolicyName:
        Type: String
    ClusterArn:
        Type: String
    SubDomain:
        Type: String
    Domain:
        Type: String
    ProductionPriority:
        Type: Number
    StagingPriority:
        Type: Number
    DevelopmentPriority:
        Type: Number
    CanaryPriority:
        Type: Number
    ProjectSubDomain:
        Type: String
    HostedZoneName:
        Type: String
    DevSNSName:
        Type: String
    QASNSName:
        Type: String
    PMSNSName:
        Type: String
    InfraSNSName:
        Type: String
Resources:
    
    DevSNSArn:
        Type: AWS::SNS::Topic
        Properties: 
            DisplayName: !Ref DevSNSName
            TopicName: !Ref DevSNSName
    QASNSArn:
        Type: AWS::SNS::Topic
        Properties: 
            DisplayName: !Ref QASNSName
            TopicName: !Ref QASNSName
    PMSNSArn:
        Type: AWS::SNS::Topic
        Properties: 
            DisplayName: !Ref PMSNSName
            TopicName: !Ref PMSNSName
    InfraSNSArn:
        Type: AWS::SNS::Topic
        Properties: 
            DisplayName: !Ref InfraSNSName
            TopicName: !Ref InfraSNSName
            
    ListenerRuleHTTP:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref LoadBalancerListenerHTTP
            Priority: !Ref ProductionPriority
            Conditions:
                - Field: host-header
                  Values:
                    - !Sub '${SubDomain}.${ProjectSubDomain}.${Domain}'
            Actions:
                - TargetGroupArn: !Ref TargetGroupProduction
                  Type: forward
    ListenerRuleHTTPDev:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref DevLoadBalancerListenerHTTP
            Priority:  !Ref DevelopmentPriority
            Conditions:
                - Field: host-header
                  Values:
                    - !Sub '${SubDomain}.dev.${ProjectSubDomain}.${Domain}'
            Actions:
                - TargetGroupArn: !Ref TargetGroupDevelopment
                  Type: forward
    ListenerRuleHTTPCanary:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref CanaryLoadBalancerListenerHTTP
            Priority: !Ref CanaryPriority
            Conditions:
                - Field: host-header
                  Values:
                    - !Sub '${SubDomain}.canary.${ProjectSubDomain}.${Domain}'
            Actions:
                - TargetGroupArn: !Ref TargetGroupCanary
                  Type: forward
    ListenerRuleHTTPStaging:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref StagingLoadBalancerListenerHTTP
            Priority: !Ref StagingPriority
            Conditions:
                - Field: host-header
                  Values:
                    - !Sub '${SubDomain}.staging.${ProjectSubDomain}.${Domain}'
            Actions:
                - TargetGroupArn: !Ref TargetGroupStaging
                  Type: forward
    ListenerRuleHTTPS:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref LoadBalancerListenerHTTPS
            Priority: !Ref ProductionPriority
            Conditions:
                - Field: host-header
                  Values:
                    - !Sub '${SubDomain}.${ProjectSubDomain}.${Domain}'
            Actions:
                - TargetGroupArn: !Ref TargetGroupProduction
                  Type: forward
    ListenerRuleHTTPSDev:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref DevLoadBalancerListenerHTTPS
            Priority: !Ref DevelopmentPriority
            Conditions:
                - Field: host-header
                  Values:
                    - !Sub '${SubDomain}.dev.${ProjectSubDomain}.${Domain}'
            Actions:
                - TargetGroupArn: !Ref TargetGroupDevelopment
                  Type: forward
    ListenerRuleHTTPSCanary:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref CanaryLoadBalancerListenerHTTPS
            Priority: !Ref CanaryPriority
            Conditions:
                - Field: host-header
                  Values:
                    - !Sub '${SubDomain}.canary.${ProjectSubDomain}.${Domain}'
            Actions:
                - TargetGroupArn: !Ref TargetGroupCanary
                  Type: forward
    ListenerRuleHTTPSStaging:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref StagingLoadBalancerListenerHTTPS
            Priority: !Ref StagingPriority
            Conditions:
                - Field: host-header
                  Values:
                    - !Sub '${SubDomain}.staging.${ProjectSubDomain}.${Domain}'
            Actions:
                - TargetGroupArn: !Ref TargetGroupStaging
                  Type: forward
    # TARGET GROUPS

    TargetGroupDevelopment:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VpcId
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 5
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 4
            HealthyThresholdCount: 2
            TargetType: "ip" 
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: 30
    TargetGroupCanary:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VpcId
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 5
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 4
            HealthyThresholdCount: 2
            TargetType: "ip" 
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: 30
    TargetGroupStaging:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VpcId
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 5
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 4
            HealthyThresholdCount: 2
            TargetType: "ip" 
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: 30
    TargetGroupProduction:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VpcId
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 5
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 4
            HealthyThresholdCount: 2
            TargetType: "ip" 
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: 30


    CodeCommitRepo:
        Type: AWS::CodeCommit::Repository
        Properties:
            RepositoryName: !Ref ContainerName
            RepositoryDescription: !Join ["-",[!Ref ContainerName, "CICD Sourcecode Repository"]]
    FargateServiceDevelopment:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref ClusterArn
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinitionDevelopment
            LaunchType: FARGATE
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: ENABLED
                    SecurityGroups:
                        - !Ref SecurityGroup
                    Subnets: 
                        - !Ref PublicSubnet1
                        - !Ref PublicSubnet2
            LoadBalancers:
                - ContainerName: !Ref FamilyDevelopment
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroupDevelopment
    FargateServiceCanary:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref ClusterArn
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinitionCanary
            LaunchType: FARGATE
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: ENABLED
                    SecurityGroups:
                        - !Ref SecurityGroup
                    Subnets: 
                        - !Ref PublicSubnet1
                        - !Ref PublicSubnet2
            LoadBalancers:
                - ContainerName: !Ref FamilyCanary
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroupCanary
    FargateServiceStaging:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref ClusterArn
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinitionStaging
            LaunchType: FARGATE
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: ENABLED
                    SecurityGroups:
                        - !Ref SecurityGroup
                    Subnets: 
                        - !Ref PublicSubnet1
                        - !Ref PublicSubnet2
            LoadBalancers:
                - ContainerName: !Ref FamilyStaging
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroupStaging
    FargateServiceProduction:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref ClusterArn
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinitionProduction
            LaunchType: FARGATE
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: ENABLED
                    SecurityGroups:
                        - !Ref SecurityGroup
                    Subnets: 
                        - !Ref PublicSubnet1
                        - !Ref PublicSubnet2
            LoadBalancers:
                - ContainerName: !Ref FamilyProduction
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroupProduction
    RepositoryDevelopment:
        Type: AWS::ECR::Repository
        Properties: 
            RepositoryName: !Join ["-",[!Ref ContainerName,"development"]]
    RepositoryCanary:
        Type: AWS::ECR::Repository
        Properties: 
            RepositoryName: !Join ["-",[!Ref ContainerName,"canary"]]
    RepositoryStaging:
        Type: AWS::ECR::Repository
        Properties: 
            RepositoryName: !Join ["-",[!Ref ContainerName,"staging"]]
    RepositoryProduction:
        Type: AWS::ECR::Repository
        Properties: 
            RepositoryName: !Join ["-",[!Ref ContainerName,"production"]]
    CodeBuildServiceRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                        Service: codebuild.amazonaws.com
                    Action: sts:AssumeRole
            Policies:
                - PolicyName: !Join ["",["CodeBuild",!Ref PolicyName]]
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Resource: "*"
                            Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                                - ecr:GetAuthorizationToken
                          - Resource: !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
                            Effect: Allow
                            Action:
                                - s3:GetObject
                                - s3:PutObject
                                - s3:GetObjectVersion 
                          - Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*'
                            Effect: Allow
                            Action:
                                - ecr:GetDownloadUrlForLayer
                                - ecr:BatchGetImage
                                - ecr:BatchCheckLayerAvailability
                                - ecr:PutImage
                                - ecr:InitiateLayerUpload
                                - ecr:UploadLayerPart
                                - ecr:CompleteLayerUpload
    CodePipelineServiceRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                        Service: codepipeline.amazonaws.com
                    Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser      
            Policies:
                - PolicyName: !Join ["",["CodePipeline",!Ref PolicyName]]
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Resource:
                              - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
                            Effect: Allow
                            Action:
                                - s3:PutObject
                                - s3:GetObject
                                - s3:GetObjectVersion
                                - s3:GetBucketVersioning
                          - Resource: "*"
                            Effect: Allow
                            Action:
                                - ecs:DescribeServices
                                - ecs:DescribeTaskDefinition
                                - ecs:DescribeTasks
                                - ecs:ListTasks
                                - ecs:RegisterTaskDefinition
                                - ecs:UpdateService
                                - codebuild:StartBuild
                                - codebuild:BatchGetBuilds
                                - iam:PassRole
                                - codecommit:UploadArchive
                                - sns:Publish
                                - cloudformation:Describe
                                - cloudformation:EstimateTemplateCost
                                - cloudformation:Get*
                                - cloudformation:List*
                                - cloudformation:ValidateTemplate
                                - cloudformation:UpdateStack
                                - cloudformation:CreateStack
    CodeBuildProjectDevelopment:
        Type: AWS::CodeBuild::Project
        Properties:
            Artifacts:
                Type: CODEPIPELINE
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/docker:17.09.0
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    - Name: AWS_DEFAULT_REGION
                      Value: !Ref AWS::Region
                    - Name: REPOSITORY_URI
                      Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FamilyDevelopment}'
                    - Name: Family
                      Value: !Ref FamilyDevelopment
                    - Name: Environment
                      Value: Development
                    - Name: DB_HOST
                      Value: http://rushrevamp-sandbox.c9dv8axo4lmn.ap-southeast-1.rds.amazonaws.com
                    - Name: DB_USERNAME
                      Value: revampadmin
                    - Name: DB_PASSWORD
                      Value: Db<+knDg
                    - Name: DB
                      Value: some-database
            Name: !Join ["-",[!Ref ContainerName,"development"]]
            ServiceRole: !Ref CodeBuildServiceRole
    CodeBuildProjectCanary:
        Type: AWS::CodeBuild::Project
        Properties:
            Artifacts:
                Type: CODEPIPELINE
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/docker:17.09.0
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    - Name: AWS_DEFAULT_REGION
                      Value: !Ref AWS::Region
                    - Name: REPOSITORY_URI
                      Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FamilyCanary}'
                    - Name: Family
                      Value: !Ref FamilyCanary
                    - Name: Environment
                      Value: Canary
            Name: !Join ["-",[!Ref ContainerName,"canary"]]
            ServiceRole: !Ref CodeBuildServiceRole        
    CodeBuildProjectStaging:
        Type: AWS::CodeBuild::Project
        Properties:
            Artifacts:
                Type: CODEPIPELINE
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/docker:17.09.0
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    - Name: AWS_DEFAULT_REGION
                      Value: !Ref AWS::Region
                    - Name: REPOSITORY_URI
                      Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FamilyStaging}'
                    - Name: Family
                      Value: !Ref FamilyStaging
                    - Name: Environment
                      Value: Staging
            Name: !Join ["-",[!Ref ContainerName,"staging"]]
            ServiceRole: !Ref CodeBuildServiceRole
    CodeBuildProject:
        Type: AWS::CodeBuild::Project
        Properties:
            Artifacts:
                Type: CODEPIPELINE
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/docker:17.09.0
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    - Name: AWS_DEFAULT_REGION
                      Value: !Ref AWS::Region
                    - Name: REPOSITORY_URI
                      Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FamilyProduction}'
                    - Name: Family
                      Value: !Ref FamilyProduction
                    - Name: Environment
                      Value: Production
            Name: !Join ["-",[!Ref ContainerName,"production"]]
            ServiceRole: !Ref CodeBuildServiceRole
    DevAmazonCloudWatchEventRole:
        Type: AWS::IAM::Role
        DependsOn: [DevelopmentPipeline]
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - events.amazonaws.com
                        Action: sts:AssumeRole
            Path: /
            Policies:
                -
                    PolicyName: !Sub ${ContainerName}-dev-pipeline-policy
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            -
                                Effect: Allow
                                Action: codepipeline:StartPipelineExecution
                                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref DevelopmentPipeline ] ] 
    DevAmazonCloudWatchEventRule:
        Type: AWS::Events::Rule
        DependsOn: [DevelopmentPipeline,DevAmazonCloudWatchEventRole]
        Properties:
            EventPattern:
                source:
                    - aws.codecommit
                detail-type:
                    - 'CodeCommit Repository State Change'
                resources:
                    - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref ContainerName ] ]
                detail:
                    event:
                        - referenceCreated
                        - referenceUpdated
                    referenceType:
                        - branch
                    referenceName:
                        - development
            Targets:
                -
                    Arn: 
                        !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref DevelopmentPipeline ] ]
                    RoleArn: !GetAtt DevAmazonCloudWatchEventRole.Arn
                    Id: !Sub ${ContainerName}-codepipeline-DevelopmentPipeline
    DevelopmentPipeline:
        Type: AWS::CodePipeline::Pipeline
        DependsOn: CodeCommitRepo
        Properties:
            RoleArn: !GetAtt CodePipelineServiceRole.Arn
            ArtifactStore:
                Type: S3
                Location: !Ref ArtifactBucketName
            Stages:
                - Name: Source
                  Actions:
                      - Name: App
                        ActionTypeId:
                            Category: Source
                            Owner: AWS
                            Version: 1
                            Provider: CodeCommit
                        Configuration:
                            BranchName: "development"
                            RepositoryName: !GetAtt CodeCommitRepo.Name
                            PollForSourceChanges: false
                        OutputArtifacts:
                            - Name: App
                        RunOrder: 1
                - Name: DevBuild
                  Actions:
                      - Name: BuildApproval
                        ActionTypeId:
                            Category: Approval
                            Owner: AWS
                            Version: 1
                            Provider: Manual
                        Configuration:
                            NotificationArn: !Ref ApprovalARN
                            ExternalEntityLink: !Sub 'http://${SubDomain}.dev.${ProjectSubDomain}.${Domain}'
                            CustomData: !Sub '{"message":"${DeployToDevMsg}","topicARN":"${DevSNSArn}"}'
                        RunOrder: 1
                      - Name: DevBuild
                        ActionTypeId:
                            Category: Build
                            Owner: AWS
                            Version: 1
                            Provider: CodeBuild
                        Configuration:
                            ProjectName: !Ref CodeBuildProjectDevelopment
                        InputArtifacts:
                            - Name: App
                        OutputArtifacts:
                            - Name: DevelopmentBuildOutput
                        RunOrder: 2
                - Name: DevelopmentDeploy
                  Actions:
                      - Name: DevelopmentDeploy
                        ActionTypeId:
                            Category: Deploy
                            Owner: AWS
                            Version: 1
                            Provider: ECS
                        Configuration:
                            ClusterName: !Ref Cluster
                            ServiceName: !Ref FargateServiceDevelopment
                            FileName: images.json
                        InputArtifacts:
                            - Name: DevelopmentBuildOutput
                        RunOrder: 1
    AmazonCloudWatchEventRole:
        Type: AWS::IAM::Role
        DependsOn: [Pipeline]
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - events.amazonaws.com
                        Action: sts:AssumeRole
            Path: /
            Policies:
                -
                    PolicyName: !Sub ${ContainerName}-prod-pipeline-policy
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            -
                                Effect: Allow
                                Action: codepipeline:StartPipelineExecution
                                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline ] ] 
    AmazonCloudWatchEventRule:
        Type: AWS::Events::Rule
        DependsOn: [Pipeline,AmazonCloudWatchEventRole]
        Properties:
            EventPattern:
                source:
                    - aws.codecommit
                detail-type:
                    - 'CodeCommit Repository State Change'
                resources:
                    - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref ContainerName ] ]
                detail:
                    event:
                        - referenceCreated
                        - referenceUpdated
                    referenceType:
                        - branch
                    referenceName:
                        - master
            Targets:
                -
                    Arn: 
                        !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline ] ]
                    RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
                    Id: !Sub ${ContainerName}-codepipeline-Pipeline
                    
    Pipeline:
        Type: AWS::CodePipeline::Pipeline
        DependsOn: CodeCommitRepo
        Properties:
            RoleArn: !GetAtt CodePipelineServiceRole.Arn
            ArtifactStore:
                Type: S3
                Location: !Ref ArtifactBucketName
            Stages:
                - Name: Source
                  Actions:
                      - Name: App
                        ActionTypeId:
                            Category: Source
                            Owner: AWS
                            Version: 1
                            Provider: CodeCommit
                        Configuration:
                            BranchName: "master"
                            RepositoryName: !GetAtt CodeCommitRepo.Name
                            PollForSourceChanges: false
                        OutputArtifacts:
                            - Name: App
                        RunOrder: 1
                - Name: CanaryBuild
                  Actions:
                      - Name: BuildApproval
                        ActionTypeId:
                            Category: Approval
                            Owner: AWS
                            Version: 1
                            Provider: Manual
                        Configuration:
                            NotificationArn: !Ref ApprovalARN
                            ExternalEntityLink: !Sub 'http://${SubDomain}.canary.${ProjectSubDomain}.${Domain}'
                            CustomData: !Sub '{"message":"${DeployToCanaryMsg}","topicARN":"${DevSNSArn}"}'
                        RunOrder: 1
                      - Name: CanaryBuild
                        ActionTypeId:
                            Category: Build
                            Owner: AWS
                            Version: 1
                            Provider: CodeBuild
                        Configuration:
                            ProjectName: !Ref CodeBuildProjectCanary
                        InputArtifacts:
                            - Name: App
                        OutputArtifacts:
                            - Name: CanaryBuildOutput
                        RunOrder: 2
                      - Name: CanaryDeploy
                        ActionTypeId:
                            Category: Deploy
                            Owner: AWS
                            Version: 1
                            Provider: ECS
                        Configuration:
                            ClusterName: !Ref Cluster
                            ServiceName: !Ref FargateServiceCanary
                            FileName: images.json
                        InputArtifacts:
                            - Name: CanaryBuildOutput
                        RunOrder: 3
                      - Name: StagingApproval1
                        ActionTypeId:
                            Category: Approval
                            Owner: AWS
                            Version: 1
                            Provider: Manual
                        Configuration:
                            NotificationArn: !Ref ApprovalARN
                            ExternalEntityLink: !Sub 'http://${SubDomain}.canary.${ProjectSubDomain}.${Domain}'
                            CustomData: !Sub '{"message":"${DeployToStagingMsg}","topicARN":"${DevSNSArn}"}'
                        RunOrder: 4
                      - Name: StagingApproval2
                        ActionTypeId:
                            Category: Approval
                            Owner: AWS
                            Version: 1
                            Provider: Manual
                        Configuration:
                            NotificationArn: !Ref ApprovalARN
                            ExternalEntityLink: !Sub 'http://${SubDomain}.canary.${ProjectSubDomain}.${Domain}'
                            CustomData: !Sub '{"message":"${DeployToStagingMsg}","topicARN":"${QASNSArn}"}'
                        RunOrder: 4
                      - Name: StagingApproval3
                        ActionTypeId:
                            Category: Approval
                            Owner: AWS
                            Version: 1
                            Provider: Manual
                        Configuration:
                            NotificationArn: !Ref ApprovalARN
                            ExternalEntityLink: !Sub 'http://${SubDomain}.canary.${ProjectSubDomain}.${Domain}'
                            CustomData: !Sub '{"message":"${DeployToStagingMsg}","topicARN":"${PMSNSArn}"}'
                        RunOrder: 4
                - Name: StagingBuild
                  Actions:
                      - Name: StagingBuild
                        ActionTypeId:
                            Category: Build
                            Owner: AWS
                            Version: 1
                            Provider: CodeBuild
                        Configuration:
                            ProjectName: !Ref CodeBuildProjectStaging
                        InputArtifacts:
                            - Name: App
                        OutputArtifacts:
                            - Name: StagingBuildOutput
                        RunOrder: 1
                      - Name: StagingDeploy
                        ActionTypeId:
                            Category: Deploy
                            Owner: AWS
                            Version: 1
                            Provider: ECS
                        Configuration:
                            ClusterName: !Ref Cluster
                            ServiceName: !Ref FargateServiceStaging
                            FileName: images.json
                        InputArtifacts:
                            - Name: StagingBuildOutput
                        RunOrder: 2
                      - Name: ProductionApproval1
                        ActionTypeId:
                            Category: Approval
                            Owner: AWS
                            Version: 1
                            Provider: Manual
                        Configuration:
                            NotificationArn: !Ref ApprovalARN
                            ExternalEntityLink: !Sub 'http://${SubDomain}.staging.${ProjectSubDomain}.${Domain}'
                            CustomData: !Sub '{"message":"${DeployToProdMsg}","topicARN":"${QASNSArn}"}'
                        RunOrder: 3
                      - Name: ProductionApproval2
                        ActionTypeId:
                            Category: Approval
                            Owner: AWS
                            Version: 1
                            Provider: Manual
                        Configuration:
                            NotificationArn: !Ref ApprovalARN
                            ExternalEntityLink: !Sub 'http://${SubDomain}.staging.${ProjectSubDomain}.${Domain}'
                            CustomData: !Sub '{"message":"${DeployToProdMsg}","topicARN":"${PMSNSArn}"}'
                        RunOrder: 3
                      - Name: ProductionApproval3
                        ActionTypeId:
                            Category: Approval
                            Owner: AWS
                            Version: 1
                            Provider: Manual
                        Configuration:
                            NotificationArn: !Ref ApprovalARN
                            ExternalEntityLink: !Sub 'http://${SubDomain}.staging.${ProjectSubDomain}.${Domain}'
                            CustomData: !Sub '{"message":"${DeployToProdMsg}","topicARN":"${InfraSNSArn}"}'
                        RunOrder: 3
                - Name: ProductionBuild
                  Actions:
                      - Name: ProductionBuild
                        ActionTypeId:
                            Category: Build
                            Owner: AWS
                            Version: 1
                            Provider: CodeBuild
                        Configuration:
                            ProjectName: !Ref CodeBuildProject
                        InputArtifacts:
                            - Name: App
                        OutputArtifacts:
                            - Name: ProductionBuildOutput
                        RunOrder: 1
                - Name: ProductionDeploy
                  Actions:
                      - Name: ProductionDeploy
                        ActionTypeId:
                            Category: Deploy
                            Owner: AWS
                            Version: 1
                            Provider: ECS
                        Configuration:
                            ClusterName: !Ref Cluster
                            ServiceName: !Ref FargateServiceProduction
                            FileName: images.json
                        InputArtifacts:
                            - Name: ProductionBuildOutput
                        RunOrder: 1
    TaskDefinitionDevelopment:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Ref FamilyDevelopment
            RequiresCompatibilities: ["FARGATE"]
            Memory: !Ref Memory
            Cpu: !Ref Cpu
            NetworkMode: "awsvpc"
            ExecutionRoleArn: !Ref TaskExecutionRole
            ContainerDefinitions:
                - Name: !Ref FamilyDevelopment
                  Image: {"Fn::Join":["",[{"Ref":"AWS::AccountId"},".dkr.ecr.ap-southeast-1.amazonaws.com/",{"Ref":"RepositoryDevelopment"},":","latest"]]}
                  Essential: true
                  Cpu: !Ref Cpu
                  PortMappings:
                      - ContainerPort: 80
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-region: !Ref AWS::Region
                          awslogs-group: !Ref LogGroup
                          awslogs-stream-prefix: !Ref AWS::StackName
                  HealthCheck:
                      Retries: 3
                      Command: 
                          ["CMD-SHELL","curl -f http://localhost/   || exit 1"]
                      Timeout: 60
                      Interval: 300
                      StartPeriod: 300
    AutoscalingRoleDevelopment:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                            Service: [ecs.application-autoscaling.amazonaws.com]
                      Action: ['sts:AssumeRole']
            Path: /
            Policies:
                - PolicyName: !Join ["-",[!Ref FamilyDevelopment,"service-autoscaling-role"]]
                  PolicyDocument:
                        Statement:
                            - Effect: Allow
                              Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm','ecs:DescribeServices', 'ecs:UpdateService']
                              Resource: '*'
    ServiceScalingTargetDevelopment:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        DependsOn: FargateServiceDevelopment
        Properties:
            MaxCapacity: 1
            MinCapacity: 1
            ResourceId: !Join ['', [service/, !Ref 'Cluster', /, !GetAtt FargateServiceDevelopment.Name]]
            RoleARN: !GetAtt [AutoscalingRoleDevelopment, Arn]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScalingPolicyDevelopment:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Join ["-",[!Ref FamilyDevelopment,"service-autoscaling-policy"]]
            PolicyType: StepScaling
            ScalingTargetId: !Ref 'ServiceScalingTargetDevelopment'
            StepScalingPolicyConfiguration:
                AdjustmentType: PercentChangeInCapacity
                Cooldown: 60
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 200  

    RAMAlarmScaleUpDevelopment:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '70'
            AlarmDescription: Alarm if our RAM is 70 percent or more
            Period: '60'
            AlarmActions: [!Ref 'ServiceScalingPolicyDevelopment']
            Namespace: AWS/ECS
            ComparisonOperator: GreaterThanThreshold
            MetricName: MemoryUtilization
    CPUAlarmScaleUpDevelopment:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '60'
            AlarmDescription: Alarm if our CPU is 60 percent or more
            Period: '60'
            AlarmActions: [!Ref 'ServiceScalingPolicyDevelopment']
            Namespace: AWS/ECS
            ComparisonOperator: GreaterThanThreshold
            MetricName: CPUUtilization

    TaskDefinitionCanary:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Ref FamilyCanary
            RequiresCompatibilities: ["FARGATE"]
            Memory: !Ref Memory
            Cpu: !Ref Cpu
            NetworkMode: "awsvpc"
            ExecutionRoleArn: !Ref TaskExecutionRole
            ContainerDefinitions:
                - Name: !Ref FamilyCanary
                  Image: {"Fn::Join":["",[{"Ref":"AWS::AccountId"},".dkr.ecr.ap-southeast-1.amazonaws.com/",{"Ref":"RepositoryCanary"},":","latest"]]}
                  Essential: true
                  Cpu: !Ref Cpu
                  PortMappings:
                      - ContainerPort: 80
                  LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-region: !Ref AWS::Region
                            awslogs-group: !Ref LogGroup
                            awslogs-stream-prefix: !Ref AWS::StackName
                  HealthCheck:
                      Retries: 3
                      Command: 
                          ["CMD-SHELL","curl -f http://localhost/   || exit 1"]
                      Timeout: 60
                      Interval: 300
                      StartPeriod: 300
    
    AutoscalingRoleCanary:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                            Service: [ecs.application-autoscaling.amazonaws.com]
                      Action: ['sts:AssumeRole']
            Path: /
            Policies:
                - PolicyName: !Join ["-",[!Ref FamilyCanary,"service-autoscaling-role"]]
                  PolicyDocument:
                        Statement:
                            - Effect: Allow
                              Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm','ecs:DescribeServices', 'ecs:UpdateService']
                              Resource: '*'
    ServiceScalingTargetCanary:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        DependsOn: FargateServiceCanary
        Properties:
            MaxCapacity: 1
            MinCapacity: 1
            ResourceId: !Join ['', [service/, !Ref 'Cluster', /, !GetAtt FargateServiceCanary.Name]]
            RoleARN: !GetAtt [AutoscalingRoleCanary, Arn]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScalingPolicyCanary:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Join ["-",[!Ref FamilyCanary,"service-autoscaling-policy"]]
            PolicyType: StepScaling
            ScalingTargetId: !Ref 'ServiceScalingTargetCanary'
            StepScalingPolicyConfiguration:
                AdjustmentType: PercentChangeInCapacity
                Cooldown: 60
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 200  

    RAMAlarmScaleUpCanary:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '70'
            AlarmDescription: Alarm if our RAM is 70 percent or more
            Period: '60'
            AlarmActions: [!Ref 'ServiceScalingPolicyCanary']
            Namespace: AWS/ECS
            ComparisonOperator: GreaterThanThreshold
            MetricName: MemoryUtilization
    CPUAlarmScaleUpCanary:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '60'
            AlarmDescription: Alarm if our CPU is 60 percent or more
            Period: '60'
            AlarmActions: [!Ref 'ServiceScalingPolicyCanary']
            Namespace: AWS/ECS
            ComparisonOperator: GreaterThanThreshold
            MetricName: CPUUtilization

    TaskDefinitionStaging:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Ref FamilyStaging
            RequiresCompatibilities: ["FARGATE"]
            Memory: !Ref Memory
            Cpu: !Ref Cpu
            NetworkMode: "awsvpc"
            ExecutionRoleArn: !Ref TaskExecutionRole
            ContainerDefinitions:
                - Name: !Ref FamilyStaging
                  Image: {"Fn::Join":["",[{"Ref":"AWS::AccountId"},".dkr.ecr.ap-southeast-1.amazonaws.com/",{"Ref":"RepositoryStaging"},":","latest"]]}
                  Essential: true
                  Cpu: !Ref Cpu
                  PortMappings:
                      - ContainerPort: 80
                  LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-region: !Ref AWS::Region
                            awslogs-group: !Ref LogGroup
                            awslogs-stream-prefix: !Ref AWS::StackName
                  HealthCheck:
                      Retries: 3
                      Command: 
                          ["CMD-SHELL","curl -f http://localhost/   || exit 1"]
                      Timeout: 60
                      Interval: 300
                      StartPeriod: 300
    AutoscalingRoleStaging:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                            Service: [ecs.application-autoscaling.amazonaws.com]
                      Action: ['sts:AssumeRole']
            Path: /
            Policies:
                - PolicyName: !Join ["-",[!Ref FamilyStaging,"service-autoscaling-role"]]
                  PolicyDocument:
                        Statement:
                            - Effect: Allow
                              Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm','ecs:DescribeServices', 'ecs:UpdateService']
                              Resource: '*'
    ServiceScalingTargetStaging:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        DependsOn: FargateServiceStaging
        Properties:
            MaxCapacity: !Ref MaxCapacity
            MinCapacity: !Ref MinCapacity
            ResourceId: !Join ['', [service/, !Ref 'Cluster', /, !GetAtt FargateServiceStaging.Name]]
            RoleARN: !GetAtt [AutoscalingRoleStaging, Arn]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScalingPolicyStaging:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Join ["-",[!Ref FamilyStaging,"service-autoscaling-policy"]]
            PolicyType: StepScaling
            ScalingTargetId: !Ref 'ServiceScalingTargetStaging'
            StepScalingPolicyConfiguration:
                AdjustmentType: PercentChangeInCapacity
                Cooldown: 60
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 200  

    RAMAlarmScaleUpStaging:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '70'
            AlarmDescription: Alarm if our RAM is 70 percent or more
            Period: '60'
            AlarmActions: [!Ref 'ServiceScalingPolicyStaging']
            Namespace: AWS/ECS
            ComparisonOperator: GreaterThanThreshold
            MetricName: MemoryUtilization
    CPUAlarmScaleUpStaging:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '60'
            AlarmDescription: Alarm if our CPU is 60 percent or more
            Period: '60'
            AlarmActions: [!Ref 'ServiceScalingPolicyStaging']
            Namespace: AWS/ECS
            ComparisonOperator: GreaterThanThreshold
            MetricName: CPUUtilization


    AutoscalingRoleProduction:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                            Service: [ecs.application-autoscaling.amazonaws.com]
                      Action: ['sts:AssumeRole']
            Path: /
            Policies:
                - PolicyName: !Join ["-",[!Ref FamilyProduction,"service-autoscaling-role"]]
                  PolicyDocument:
                        Statement:
                            - Effect: Allow
                              Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm','ecs:DescribeServices', 'ecs:UpdateService']
                              Resource: '*'
    ServiceScalingTargetProduction:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        DependsOn: FargateServiceProduction
        Properties:
            MaxCapacity: !Ref MaxCapacity
            MinCapacity: !Ref MinCapacity
            ResourceId: !Join ['', [service/, !Ref 'Cluster', /, !GetAtt FargateServiceProduction.Name]]
            RoleARN: !GetAtt [AutoscalingRoleProduction, Arn]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScalingPolicyProduction:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Join ["-",[!Ref FamilyProduction,"service-autoscaling-policy"]]
            PolicyType: StepScaling
            ScalingTargetId: !Ref 'ServiceScalingTargetProduction'
            StepScalingPolicyConfiguration:
                AdjustmentType: PercentChangeInCapacity
                Cooldown: 60
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 200  

    RAMAlarmScaleUpProduction:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '70'
            AlarmDescription: Alarm if our RAM is 70 percent or more
            Period: '60'
            AlarmActions: [!Ref ServiceScalingPolicyProduction]
            Namespace: AWS/ECS
            ComparisonOperator: GreaterThanThreshold
            MetricName: MemoryUtilization
    CPUAlarmScaleUpProduction:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '60'
            AlarmDescription: Alarm if our CPU is 60 percent or more
            Period: '60'
            AlarmActions: [!Ref 'ServiceScalingPolicyProduction']
            Namespace: AWS/ECS
            ComparisonOperator: GreaterThanThreshold
            MetricName: CPUUtilization

    TaskDefinitionProduction:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Ref FamilyProduction
            RequiresCompatibilities: ["FARGATE"]
            Memory: !Ref Memory
            Cpu: !Ref Cpu
            NetworkMode: "awsvpc"
            ExecutionRoleArn: !Ref TaskExecutionRole
            ContainerDefinitions:
                - Name: !Ref FamilyProduction
                  Image: {"Fn::Join":["",[{"Ref":"AWS::AccountId"},".dkr.ecr.ap-southeast-1.amazonaws.com/",{"Ref":"RepositoryProduction"},":","latest"]]}
                  Essential: true
                  Cpu: !Ref Cpu
                  PortMappings:
                      - ContainerPort: 80
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-region: !Ref AWS::Region
                          awslogs-group: !Ref LogGroup
                          awslogs-stream-prefix: !Ref AWS::StackName
                  HealthCheck:
                      Retries: 3
                      Command: 
                          ["CMD-SHELL","curl -f http://localhost/   || exit 1"]
                      Timeout: 60
                      Interval: 300
                      StartPeriod: 300
Outputs:
    ClusterName:
        Value: !Ref Cluster
    ContainerName:
        Value: !Ref ContainerName
    TargetGroupDevelopment:
        Value: !Ref TargetGroupDevelopment
    TargetGroupProduction:
        Value: !Ref TargetGroupProduction
    TargetGroupCanary:
        Value: !Ref TargetGroupCanary
    TargetGroupStaging:
        Value: !Ref TargetGroupStaging
    ServiceUrl:
        Description: URL of the load balancer for the sample service.
        Value: !Sub 'http://${DNSName}/${ContainerName}'
    DevURL:
        Description: URL of the Development Service
        Value: !Sub '${SubDomain}.dev.${ProjectSubDomain}.${Domain}'
    CanaryURL:
        Description: URL of the Development Service
        Value: !Sub '${SubDomain}.canary.${ProjectSubDomain}.${Domain}'
    StagingURL:
        Description: URL of the Development Service
        Value: !Sub '${SubDomain}.staging.${ProjectSubDomain}.${Domain}'
    ProductionURL:
        Description: URL of the Development Service
        Value: !Sub '${SubDomain}.${ProjectSubDomain}.${Domain}'
    VpcId:
        Value: !Ref VpcId
    CodeCommitRepo:
        Value: !GetAtt CodeCommitRepo.CloneUrlHttp
    PipelineUrl:
        Value: !Sub 'https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}'
